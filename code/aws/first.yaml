Resources:
#VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/26
      EnableDnsSupport: true
      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value: myVPC          

#Public Subnet      
  myPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref myVPC
      MapPublicIpOnLaunch: True
      CidrBlock: 10.0.0.0/28
      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value: myPublicSubnet

  myPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref myVPC
      CidrBlock: 10.0.0.16/28
      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value: myPrivateSubnet


  myPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref myVPC
      MapPublicIpOnLaunch: True
      CidrBlock: 10.0.0.32/28
      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value: myPublicSubnet2



  myPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref myVPC
      CidrBlock: 10.0.0.48/28
      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value: myPrivateSubnet2



  myPublicEC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09538990a0c4fe9be
      InstanceType: "t2.micro"
      SubnetId: !Ref myPublicSubnet
      KeyName: "consoleUserKey"
      #KeyName: "myBuntu"
      SecurityGroupIds:
        - !Ref mySecGroupName
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install -y httpd
        systemctl start httpd
        systemctl enable httpd
        echo 'path: "/"' >> /var/www/html/index.html
        ec2-metadata -i >> /var/www/html/index.html
        
        mkdir /var/www/html/instance1
        echo 'path: "/isntace1/"' >> /var/www/html/instance1/index.html
        ec2-metadata -i >> /var/www/html/instance1/index.html
      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value:   myPublicEC2Instance1


  myPrivateEC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09538990a0c4fe9be
      InstanceType: "t2.micro"
      SubnetId: !Ref myPrivateSubnet
      KeyName: "consoleUserKey"
      SecurityGroupIds:
        - !Ref mySecGroupName
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install -y httpd
        systemctl start httpd
        systemctl enable httpd
        echo 'path: "/"' >> /var/www/html/index.html
        ec2-metadata -i >> /var/www/html/index.html
        
        mkdir /var/www/html/instance1
        echo 'path: "/isntace1/"' >> /var/www/html/instance1/index.html
        ec2-metadata -i >> /var/www/html/instance1/index.html
      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value:   myPrivateEC2Instance1


  myPrivateEC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09538990a0c4fe9be
      InstanceType: "t2.micro"
      SubnetId: !Ref myPrivateSubnet
      KeyName: "consoleUserKey"
      SecurityGroupIds:
        - !Ref mySecGroupName
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install -y httpd
        systemctl start httpd
        systemctl enable httpd
        echo 'path: "/"' >> /var/www/html/index.html
        ec2-metadata -i >> /var/www/html/index.html
        
        mkdir /var/www/html/instance2
        echo 'path: "/instance2/"' >> /var/www/html/instance2/index.html
        ec2-metadata -i >> /var/www/html/instance2/index.html
      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value:   myPrivateEC2Instance2

###
  myPrivateEC2Instance21:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09538990a0c4fe9be
      InstanceType: "t2.micro"
      SubnetId: !Ref myPrivateSubnet2
      KeyName: "consoleUserKey"
      SecurityGroupIds:
        - !Ref mySecGroupName
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install -y httpd
        systemctl start httpd
        systemctl enable httpd
        echo 'path: "/"' >> /var/www/html/index.html
        ec2-metadata -i >> /var/www/html/index.html
        
        mkdir /var/www/html/instance1
        echo 'path: "/isntace1/"' >> /var/www/html/instance1/index.html
        ec2-metadata -i >> /var/www/html/instance1/index.html
      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value:   myPrivateEC2Instance21


  myPrivateEC2Instance22:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09538990a0c4fe9be
      InstanceType: "t2.micro"
      SubnetId: !Ref myPrivateSubnet2
      KeyName: "consoleUserKey"
      SecurityGroupIds:
        - !Ref mySecGroupName
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install -y httpd
        systemctl start httpd
        systemctl enable httpd
        echo 'path: "/"' >> /var/www/html/index.html
        ec2-metadata -i >> /var/www/html/index.html
        
        mkdir /var/www/html/instance2
        echo 'path: "/instance2/"' >> /var/www/html/instance2/index.html
        ec2-metadata -i >> /var/www/html/instance2/index.html
      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value:   myPrivateEC2Instance22          
###
#Security Group
  mySecGroupName:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Created in CFN Allow http to client host
      GroupName: MyCloudFormationSG
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0  
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0          
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0                
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0    
      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value: myPublicSubnet


# Internet Gateway
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value: myInternetGateway  


          
# Attach Internet Gateway to VPC
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref myVPC

# Route Table 
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value: myRouteTable  
          
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value: myPrivateRouteTable  


# EC2 & IGW Route Table connection 
  myRouteTableAssociationWithIGW:
    DependsOn: myInternetGateway
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref myInternetGateway
      RouteTableId: !Ref myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      
      
# Route Table and Subnet Connection
  mySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myRouteTable
      SubnetId: !Ref myPublicSubnet


  mySubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myRouteTable
      SubnetId: !Ref myPublicSubnet2

  myPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref myPrivateSubnet


  myPrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref myPrivateSubnet2


  myALB: 
    Type : 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties :
      SecurityGroups: 
        - !Ref mySecGroupName 
      Subnets : 
        - !Ref myPublicSubnet
        - !Ref myPublicSubnet2

      Tags:
        - Key: jrelease
          Value: jint
        - Key: Name 
          Value: myALB



  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref ALBTargetGroup1
          Type: forward
      LoadBalancerArn: !Ref myALB
      Port: 80
      Protocol: HTTP
      
  ALBListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref ALBTargetGroup1
          Type: forward
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /instance1/*
      ListenerArn: !Ref ALBListener
      Priority: 1
      
  ALBListenerRule2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref ALBTargetGroup2
          Type: forward
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /instance2/*
      ListenerArn: !Ref ALBListener
      Priority: 2




  ALBTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref myVPC
      Name: ALBTargetGroup1
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      Matcher: 
        HttpCode: 200
      Targets:
        - Id: !Ref myPrivateEC2Instance1
      TargetType: instance


  ALBTargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref myVPC
      Name: ALBTargetGroup2
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      Matcher: 
        HttpCode: 200
      Targets:
        - Id: !Ref myPrivateEC2Instance2
      TargetType: instance
